1/OVERRIDING 
- Nói đơn giản là nó đã ghi đè nội dung lên method trước đó. Lưu ý, method này phải được khai báo giống hệt method trước cả đối số và kiểu trả về.
an(),an(),run,run
2/OVERLOADDING
- Tạo ra các method có cùng tên, nhưng các method đó phải khác nhau về đối số truyền vào hoặc kiểu trả về
sum(a,b),sum(a,b,c)
1/LAP TRINH HUONG DOI TUONG LA GI?
- Lập trình hướng đối tượng (Object Oriented Programming - gọi tắt là OOP) hay chi tiết hơn là Lập trình định hướng đối tượng, chính là phương pháp lập trình lấy đối tượng làm nền tảng để xây dựng thuật giải, xây dựng chương trình.
- Giúp người lập trình quản lý phát triển và quản lý code dễ dàng hơn , tính tái sử dụng 
2/PHAN BIET CLASS VA OBJECT
- Object là vật thể hay đồ vật cụ thể
- Class là một khung kịch bản của một đối tượng, hoặc bạn có thể hiểu đối tượng được tạo ra từ một lớp.  
3/ TÍNH KẾ THỪA
Là sự kế thừa, tái sử dụng phương thức, thuộc tính của lớp cơ sở. 
Và lớp kế thừa được gọi là lớp con, nó sẽ thừa hưởng những gì lớp cha có và cho phép. 
Kế thừa giúp tiết kiệm thời gian viết code, tái sử dụng và mở rộng hiệu quả, dễ bảo trì sửa chữa. 
Có 2 loại thừa kế, đó là đa thừa kế và đơn thừa kế
vd: hinh , hinh chu nhat
vd: Xe may , Phuong tien
vd: dong vat, con cho 
vd: nhan vat : chien binh , phu thuy-phu thuy trang, phu thuy den
vd: nhan su : hoc sinh , giao vien
vd: nhan vien:laptrinhvien,ketoan


2/TÍNH ĐA HÌNH
Cùng một hình động các đối tượng có cách thể hiện khác nhau (overwrite)
VD: lớp hình tròn và hình vuông cùng kế thừa từ lớp hình học cả 2 đều có phương thức tính chu vi.
Hình tròn: chu vi= 2*pi*r; (1)
Hình vuông: chu vi= 4*a; (2)
ĐỘng Vật : Con heo , con Bò

3/TÍNH ĐÓNG GÓI
Tính đóng gói (encapsulation) "đóng gói" thuộc tính và phương thức của đối tượng (hoặc lớp) thông qua việc giới hạn quyền truy cập (hoặc thay đổi) giá trị của thuộc tính hoặc quyền gọi phương thức

public: Cho phép truy cập (và thay đổi giá trị) của thuộc tính và phương thức ở mọi phạm vi
private: Chỉ cho phép truy cập (hay thay đổi) giá trị của thuộc tính và phương thức ở phạm vi của đối tượng (hoặc lớp).
protected: Chỉ cho phép truy cập (hay thay đổi) giá trị của thuộc tính và phương thức ở phạm vi của đối tượng con (hoặc lớp con).

4/ABSTRACT CLASS(Cho Class)
Lớp trừu tượng đơn giản được xem như một class cha cho tất cả các Class có cùng bản chất
Do đó mỗi lớp dẫn xuất (lớp con) chỉ có thể kế thừa từ một lớp trừu tượng
Lớp dẫn xuất của Abstract class chỉ cần thực hiện những Method và Properties được khai báo trừu tượng (có từ khóa abstract)
Bắt buộc khai báo(public , protected) và bắt buộc phải có từ khóa abstract trong các Method và Properties được khai báo trừu tượng
VD:
- Abstract class ConVat có các lớp con Chim, Ca.
- Abstract class MayMoc có các lớp con MayBay, Thuyen

5/INTERFACE(Cho method)
Lớp này được xem như một mặt nạ cho tất cả các Class cùng cách thức hoạt động nhưng có thể khác nhau về bản chất
Từ đó lớp dẫn xuất có thể kế thừa từ nhiều lớp Interface để bổ sung đầy đủ cách thức hoạt động của mình
Lớp dẫn xuất của interface class phải thực hiện toàn bộ những method và properties đã khai báo 
Không cần khai báo Access modifier vì mặc định là public
VD:Interface: iBay, iBoi, iChay.

6/STATIC
a/Biến static
Khi giá trị của biến thay đổi, tất cả các đối tượng của lớp sẽ được cập nhật để nhìn thấy giá trị mới của biến
Có thể được quản lý mà không cần phải tạo ra thực thể của lớp
b/Hàm static
Cũng được xem là phương thức của lớp, nhưng không tham chiếu tới bất kỳ thực thể nào của lớp, 
thường dùng để truy xuất tới các biến thành viên và hàm thành viên
Hàm tĩnh là 1 hàm dùng chung của lớp. Được gọi thông qua tên lớp và không cần khởi tạo bất kỳ đối tượng nào, từ đó tránh việc lãng phí bộ nhớ
Trong khi đó, thành viên tĩnh (biến, phương thức) được coi là phần chung của các đối tượng trong cùng một lớp.

7/UML
UML là ngôn ngữ mô hình hoá, ngôn ngữ đặc tả và ngôn ngữ xây dựng mô hình trong quá trình phát triển phần mềm, 
đặc biệt là trong phân tích và thiết kế hệ thống hướng đối tượng. 
UML là ngôn ngữ hình thức, thống nhất và chuẩn hoá mô hìnhhệ thống một cách trực quan. 
Nghĩa là các thành phần trong mô hình được thể hiện bởicác ký hiệu đồ hoạ,
 biểu đồ và thể hiện đầy đủ mối quan hệ giữa các chúng một cách thống nhất và có logic chặt chẽ.
8/Design pattern
9/Qua trinh san xuat 1 phan mem: requirement, design, inmplement, test
10/SQL Serveer , sql 
11/Nested clss
12/char, varchar
13/SO sanh MVC voi mo hinh 3 lớp
Mô hình 3 lớp: 
+Presentation Layers:Lớp này làm nhiệm vụ giao tiếp với người dùng cuối để thu thập dữ liệu và hiển thị kết quả/dữ liệu thông qua các thành phần trong giao diện người sử dụng
+Business Logic Layer:Đây là layer xử lý chính các dữ liệu trước khi được đưa lên hiển thị trên màn hình hoặc xử lý các dữ liệu trước khi chuyển xuống Data Access Layer để lưu dữ liệu xuống cơ sở dữ liệu.
+Data Access Layer:Lớp này thực hiện các nghiệp vụ liên quan đến lưu trữ và truy xuất dữ liệu của ứng dụng như đọc, lưu, cập nhật cơ sở dữ liệu.

Design pattern
Design patterns là các giải pháp đã được tối ưu hóa, được tái sử dụng cho các vấn đề lập trình mà chúng ta gặp phải hàng ngày. Nó là một khuôn mẫu đã được suy nghĩ, giải quyết trong tình huống cụ thể rồi.


As you can see my CV, my name is Nguyen Anh Phat but you can call me Phat. I study at International Technology Univesity and my major is Computer Engineer. I live in District 8. I use my free time to help my mom and do home work after that. I also surfer internet to improve my knowledge at IT web like

angular
điểm mạnh của angular là gì
1. Đồng bộ dữ liệu giữa view và component thông qua việc sử dụng ngModel
2. Nhờ tính dependency injection : giúp giảm sự phụ thuộc giữa các class . VD : Service, v.v... vì vậy khi ta sử dụng chỉ cần inject vào constructor và sử dụng mà ko cần khởi tạo hay làm quá nhiều thứ rườm rà

3/Oservable là một async pattern được sử dụng trong Angular 2. Khái niệm observable đến từ observer design pattern là một đối tượng thông báo cho các đối tượng theo dõi khi một điều gì đó xảy ra. Trong RxJs
nói chung là quản lý chuỗi các dữ liệu hoặc sự kiện và cung cấp nhiều hàm tiện ích.	